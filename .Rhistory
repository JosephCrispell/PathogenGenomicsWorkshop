print("I am here")
coords <- calculateLocation(location, axisLimits)
}
# Calculate the cex of the watermark to fill the plot
watermarkCex <- cex
if(is.null(cex)){
watermarkCex <- calculateWatermarkCex(text, axisLimits)
}
# Set the alpha of the watermark colour
col <- basicPlotteR::setAlpha(col, alpha)
# Plot the water mark
text(x=coords[1], y=coords[2], labels=text, col=col, cex=watermarkCex, srt=srt, ...)
}
calculateWatermarkCex <- function(text, axisLimits){
# Note the number of characters in the text
nCharacters <- nchar(text)
# Calculate the width of a character in the current plot
characterWidth <- strwidth(text) / nCharacters
# Calculate the text width
textWidth <- characterWidth * nCharacters
# Note the wdith of the X axis
xAxisLength <- axisLimits[2] - axisLimits[1]
# Calculate the factor to multiple the text to make it fit the plotting window
return(xAxisLength / textWidth)
}
calculateLocation <- function(location=NULL, axisLimits){
# Initialise a vector to store the coordinates of the location
coords <- c(NA, NA)
# Calculate the length of each axis
xLength <- axisLimits[2] - axisLimits[1]
yLength <- axisLimits[4] - axisLimits[3]
# Calculate the centre if no location provided as a default
coords[1] <- axisLimits[1] + (xLength*0.5)
coords[2] <- axisLimits[3] + (yLength*0.5)
# Check if location text given
if(is.null(location) == FALSE){
# Check if location is one of the options
if(location %in% c("top", "bottom", "left", "right",
"topleft", "topright",
"bottomleft", "bottomright") == FALSE){
location <- NULL
stop("Location string not recognised. Please try one of: c(\"top\", \"bottom\", \"left\", \"right\",
\"topleft\", \"topright\", \"bottomleft\", \"bottomright\")")
}
# Define the location using the string code
if(grepl(location, pattern="top")){
coords[2] <- axisLimits[4]
}
if(grepl(location, pattern="left")){
coords[1] <- axisLimits[1]
}
if(grepl(location, pattern="right")){
coords[1] <- axisLimits[2]
}
if(grepl(location, pattern="bottom")){
coords[2] <- axisLimits[3]
}
}
return(coords)
}
# Add a watermark
watermark("CONFIDENTIAL", location="top")
calculateLocation <- function(location=NULL, axisLimits){
print(location)
# Initialise a vector to store the coordinates of the location
coords <- c(NA, NA)
# Calculate the length of each axis
xLength <- axisLimits[2] - axisLimits[1]
yLength <- axisLimits[4] - axisLimits[3]
# Calculate the centre if no location provided as a default
coords[1] <- axisLimits[1] + (xLength*0.5)
coords[2] <- axisLimits[3] + (yLength*0.5)
# Check if location text given
if(is.null(location) == FALSE){
# Check if location is one of the options
if(location %in% c("top", "bottom", "left", "right",
"topleft", "topright",
"bottomleft", "bottomright") == FALSE){
location <- NULL
stop("Location string not recognised. Please try one of: c(\"top\", \"bottom\", \"left\", \"right\",
\"topleft\", \"topright\", \"bottomleft\", \"bottomright\")")
}
# Define the location using the string code
if(grepl(location, pattern="top")){
coords[2] <- axisLimits[4]
}
if(grepl(location, pattern="left")){
coords[1] <- axisLimits[1]
}
if(grepl(location, pattern="right")){
coords[1] <- axisLimits[2]
}
if(grepl(location, pattern="bottom")){
coords[2] <- axisLimits[3]
}
}
return(coords)
}
# Add a watermark
watermark("CONFIDENTIAL", location="top")
watermark <- function(text, location=NULL, x=NULL, y=NULL, col="black", alpha=0.5, srt=45, cex=NULL, ...){
# Get the axis limits of the current plot
axisLimits <- par("usr")
# Get the label location
coords <- c(x, y)
# If no coordinates then calculate location based on a string (if no strin, defaults to centre)
if(is.null(x)){
coords <- calculateLocation(location, axisLimits)
}
# Calculate the cex of the watermark to fill the plot
watermarkCex <- cex
if(is.null(cex)){
watermarkCex <- calculateWatermarkCex(text, axisLimits)
}
# Set the alpha of the watermark colour
col <- basicPlotteR::setAlpha(col, alpha)
# Plot the water mark
text(x=coords[1], y=coords[2], labels=text, col=col, cex=watermarkCex, srt=srt, ...)
}
# Add a watermark
watermark("CONFIDENTIAL", location="top")
calculateLocation <- function(location=NULL, axisLimits){
# Initialise a vector to store the coordinates of the location
coords <- c(NA, NA)
# Calculate the length of each axis
xLength <- axisLimits[2] - axisLimits[1]
yLength <- axisLimits[4] - axisLimits[3]
# Calculate the centre if no location provided as a default
coords[1] <- axisLimits[1] + (xLength*0.5)
coords[2] <- axisLimits[3] + (yLength*0.5)
# Check if location text given
if(is.null(location) == FALSE){
# Check if location is one of the options
if(location %in% c("top", "bottom", "middle", "left", "right",
"topleft", "topright",
"bottomleft", "bottomright") == FALSE){
location <- NULL
stop("Location string not recognised. Please try one of: c(\"top\", \"bottom\", \"middle\",",
"\"left\", \"right\", \"topleft\", \"topright\", \"bottomleft\", \"bottomright\")")
}
# Define the location using the string code
if(grepl(location, pattern="top")){
coords[2] <- axisLimits[4]
}
if(grepl(location, pattern="left")){
coords[1] <- axisLimits[1]
}
if(grepl(location, pattern="right")){
coords[1] <- axisLimits[2]
}
if(grepl(location, pattern="bottom")){
coords[2] <- axisLimits[3]
}
}
return(coords)
}
watermark <- function(text, location=NULL, x=NULL, y=NULL, col="black", alpha=0.5, srt=45, cex=NULL,
...){
# Get the axis limits of the current plot
axisLimits <- par("usr")
# Get the label location
coords <- c(x, y)
# If no coordinates then calculate location based on a string (if no strin, defaults to centre)
if(is.null(x)){
coords <- calculateLocation(location, axisLimits)
}
# Calculate the cex of the watermark to fill the plot
watermarkCex <- cex
if(is.null(cex)){
watermarkCex <- calculateWatermarkCex(text, axisLimits)
}
# Set the alpha of the watermark colour
col <- basicPlotteR::setAlpha(col, alpha)
# Plot the water mark
text(x=coords[1], y=coords[2], labels=text, col=col, cex=watermarkCex, srt=srt, ...)
}
# Plot the points
plot(x, y, las=1, bty="n", pch=19, col=rgb(0,0,0, 0.5))
# Add a watermark
watermark("CONFIDENTIAL", location="top", xpd=TRUE)
# Add a watermark
watermark("CONFIDENTIAL", location="top", xpd=TRUE, srt=90)
# Add a watermark
watermark("CONFIDENTIAL", location="top", xpd=TRUE, srt=00)
# Generate some example data
x <- rnorm(1000)
y <- rnorm(1000)
# Plot the points
plot(x, y, las=1, bty="n", pch=19, col=rgb(0,0,0, 0.5))
# Add a watermark
watermark("CONFIDENTIAL", xpd=TRUE)
x <- rnorm(10000)
y <- rnorm(10000)
# Plot the points
plot(x, y, las=1, bty="n", pch=19, col=rgb(0,0,0, 0.5))
# Plot the points
plot(x, y, las=1, bty="n", pch=19, col=rgb(0,0,0, 0.1))
# Add a watermark
watermark("CONFIDENTIAL", col="red")
# Add a watermark
watermark("CONFIDENTIAL", col="red", alpha=0.1)
# Plot the points
plot(x, y, las=1, bty="n", pch=19, col=rgb(0,0,0, 0.1))
# Add a watermark
watermark("CONFIDENTIAL", col="red", alpha=0.1)
# Plot the points
plot(x, y, las=1, bty="n", pch=19, col=rgb(0,0,0, 0.1))
# Add a watermark
watermark("CONFIDENTIAL", col="red", alpha=0.5)
watermark <- function(text, location=NULL, x=NULL, y=NULL, col="black", alpha=0.5, srt=45, cex=1,
...){
# Get the axis limits of the current plot
axisLimits <- par("usr")
# Get the label location
coords <- c(x, y)
# If no coordinates then calculate location based on a string (if no strin, defaults to centre)
if(is.null(x)){
coords <- calculateLocation(location, axisLimits)
}
# Calculate the cex of the watermark to fill the plot
watermarkCex <- calculateWatermarkCex(text, axisLimits) * cex
# Set the alpha of the watermark colour
col <- basicPlotteR::setAlpha(col, alpha)
# Plot the water mark
text(x=coords[1], y=coords[2], labels=text, col=col, cex=watermarkCex, srt=srt, ...)
}
# Add a watermark
watermark("CONFIDENTIAL", col="red", alpha=0.5)
# Generate some example data
x <- rnorm(10000)
y <- rnorm(10000)
# Plot the points
plot(x, y, las=1, bty="n", pch=19, col=rgb(0,0,0, 0.1))
# Add a watermark
watermark("CONFIDENTIAL", col="red")
#### FUNCTIONS ####
watermark <- function(text, location=NULL, x=NULL, y=NULL, col="black", alpha=0.5, srt=45, cex=1,
...){
# Get the axis limits of the current plot
axisLimits <- par("usr")
# Get the label location
coords <- c(x, y)
# If no coordinates then calculate location based on a string (if no strin, defaults to centre)
if(is.null(x)){
coords <- calculateLocation(location, axisLimits)
}
# Calculate the cex of the watermark to fill the plot
watermarkCex <- calculateWatermarkCex(text, axisLimits) * cex
# Set the alpha of the watermark colour
col <- basicPlotteR::setAlpha(col, alpha)
# Plot the water mark
text(x=coords[1], y=coords[2], labels=text, col=col, cex=watermarkCex, srt=srt, ...)
}
calculateWatermarkCex <- function(text, axisLimits){
# Note the number of characters in the text
nCharacters <- nchar(text)
# Calculate the width of a character in the current plot
characterWidth <- strwidth(text) / nCharacters
# Calculate the text width
textWidth <- characterWidth * nCharacters
# Note the wdith of the X axis
xAxisLength <- axisLimits[2] - axisLimits[1]
# Calculate the factor to multiple the text to make it fit the plotting window
return(xAxisLength / textWidth)
}
calculateLocation <- function(location=NULL, axisLimits){
# Initialise a vector to store the coordinates of the location
coords <- c(NA, NA)
# Calculate the length of each axis
xLength <- axisLimits[2] - axisLimits[1]
yLength <- axisLimits[4] - axisLimits[3]
# Calculate the centre if no location provided as a default
coords[1] <- axisLimits[1] + (xLength*0.5)
coords[2] <- axisLimits[3] + (yLength*0.5)
# Check if location text given
if(is.null(location) == FALSE){
# Check if location is one of the options
if(location %in% c("top", "bottom", "middle", "left", "right",
"topleft", "topright",
"bottomleft", "bottomright") == FALSE){
location <- NULL
stop("Location string not recognised. Please try one of: c(\"top\", \"bottom\", \"middle\",",
"\"left\", \"right\", \"topleft\", \"topright\", \"bottomleft\", \"bottomright\")")
}
# Define the location using the string code
if(grepl(location, pattern="top")){
coords[2] <- axisLimits[4]
}
if(grepl(location, pattern="left")){
coords[1] <- axisLimits[1]
}
if(grepl(location, pattern="right")){
coords[1] <- axisLimits[2]
}
if(grepl(location, pattern="bottom")){
coords[2] <- axisLimits[3]
}
}
return(coords)
}
# Generate some example data
x <- runif(10000)
y <- runif(10000)
# Plot the points
plot(x, y, las=1, bty="n", pch=19, col=rgb(0,0,0, 0.1))
# Add a watermark
watermark("CONFIDENTIAL", col="red")
?text
?legend
?text
?progress
# Set the number of iterations of the for loop
n <- 1000
for(i in 1:n){
# Sleep for a tenth of a second
Sys.sleep(0.01)
# Update the progress bar
progress(i, n)
}
# Set the number of iterations of the for loop
n <- 1000
for(i in 1:n){
# Sleep for a tenth of a second
Sys.sleep(0.01)
# Update the progress bar
progress(i, n)
}
watermark <- function(text, location=NULL, x=NULL, y=NULL, col="black", alpha=0.5, srt=45, cex=1,
...){
# Get the axis limits of the current plot
axisLimits <- par("usr")
# Get the label location
coords <- c(x, y)
# If no coordinates then calculate location based on a string (if no strin, defaults to centre)
if(is.null(x)){
coords <- calculateLocation(location, axisLimits)
}
# Calculate the cex of the watermark to fill the plot
watermarkCex <- calculateWatermarkCex(text, axisLimits) * cex
# Set the alpha of the watermark colour
col <- basicPlotteR::setAlpha(col, alpha)
# Plot the water mark
text(x=coords[1], y=coords[2], labels=text, col=col, cex=watermarkCex, srt=srt, ...)
}
#' Calculate the factor to multiple text by so that it fits to plotting window
#'
#' Function used by \code{watermark()}
#' @param text a character vector specifying the text to be written
#' @param axisLimits a numeric vector storing the limits of the axes in the format \code{c(xMin, xMax, yMin, yMax)}.
#' @keywords internal
#' @return Returns a numeric value to multiple the size of the text to be plotted.
calculateWatermarkCex <- function(text, axisLimits){
# Note the number of characters in the text
nCharacters <- nchar(text)
# Calculate the width of a character in the current plot
characterWidth <- strwidth(text) / nCharacters
# Calculate the text width
textWidth <- characterWidth * nCharacters
# Note the wdith of the X axis
xAxisLength <- axisLimits[2] - axisLimits[1]
# Calculate the factor to multiple the text to make it fit the plotting window
return(xAxisLength / textWidth)
}
#' Get/calculate the location of the text to be plotted. Either as centre of plotting window or specified text location.
#'
#' Function used by \code{watermark()}
#' @param location a character vector specifying the location for the text to be plotted
#' @param axisLimits a numeric vector storing the limits of the axes in the format \code{c(xMin, xMax, yMin, yMax)}.
#' @keywords internal
#' @return Returns a numeric vector containing the X and Y coordinates to plot the text at
calculateLocation <- function(location=NULL, axisLimits){
# Initialise a vector to store the coordinates of the location
coords <- c(NA, NA)
# Calculate the length of each axis
xLength <- axisLimits[2] - axisLimits[1]
yLength <- axisLimits[4] - axisLimits[3]
# Calculate the centre if no location provided as a default
coords[1] <- axisLimits[1] + (xLength*0.5)
coords[2] <- axisLimits[3] + (yLength*0.5)
# Check if location text given
if(is.null(location) == FALSE){
# Check if location is one of the options
if(location %in% c("top", "bottom", "middle", "left", "right",
"topleft", "topright",
"bottomleft", "bottomright") == FALSE){
location <- NULL
stop("Location string not recognised. Please try one of: c(\"top\", \"bottom\", \"middle\",",
"\"left\", \"right\", \"topleft\", \"topright\", \"bottomleft\", \"bottomright\")")
}
# Define the location using the string code
if(grepl(location, pattern="top")){
coords[2] <- axisLimits[4]
}
if(grepl(location, pattern="left")){
coords[1] <- axisLimits[1]
}
if(grepl(location, pattern="right")){
coords[1] <- axisLimits[2]
}
if(grepl(location, pattern="bottom")){
coords[2] <- axisLimits[3]
}
}
return(coords)
}
# Generate some example data
x <- runif(10000)
y <- runif(10000)
# Plot the points
plot(x, y, las=1, bty="n", pch=19, col=rgb(0,0,0, 0.1))
# Add a watermark
watermark("CONFIDENTIAL", col="red")
# Add a watermark
watermark("This is a really long string of characters", col="red")
# Plot the points
plot(x, y, las=1, bty="n", pch=19, col=rgb(0,0,0, 0.1))
# Add a watermark
watermark("This is a really long string of characters", col="red")
devtools::install_github("JosephCrispell/pathogenGenomicsWorkshop")
?dir.create
knitr::opts_chunk$set(echo = TRUE)
# Get the current date
today <- format(Sys.Date(), "%d-%m-%y")
# Create a new directory on our desktop to store todays outputs
directory <- file.path("~", "Desktop", paste0("CRT_PathogenGenomicsWorkshop_", today), "")
dir.create(directory)
# Set your working directory
setwd(directory)
library(ape)
?bootstrap.pml
library(phangorn)
?bootstrap.pml
?root
?addSNPScale
?modelTest
?optim.pml
# Get the current date
today <- format(Sys.Date(), "%d-%m-%y")
# Create a new directory on our desktop to store todays outputs
directory <- file.path("~", "Desktop", paste0("CRT_PathogenGenomicsWorkshop_", today), "")
dir.create(directory)
# Set your working directory
setwd(directory)
# Get the current date
today <- format(Sys.Date(), "%d-%m-%y")
# Load the required libraries
suppressWarnings(library(ape)) # For reading in sequence
suppressWarnings(library(phangorn)) # For testing substitution models and building and plotting the phylogeny
suppressWarnings(library(pathogenGenomicsWorkshop)) # Our custom package for the current course
# Read in the FASTA file
fastaFile <- system.file("extdata", "Mbovis.fasta", package = "pathogenGenomicsWorkshop")
nucleotideAlignment <- read.dna(fastaFile, format = "fasta", as.character=TRUE)
# Convert the nucleotides to upper case
nucleotideAlignment <- toupper(nucleotideAlignment)
# Read in the genome positions
positionsFile <- system.file("extdata", "Mbovis_FASTApositions.txt", package = "pathogenGenomicsWorkshop")
genomePositions <- read.table(positionsFile, header=TRUE)
# Plot the positions of the FASTA positions
hist(genomePositions$Position, breaks=1000, las=1,
main="Positions of sites in the FASTA nucleotide alignment",
xlab="Position")
# Count the nucleotides at each site in the alignment
nucleotideCountsAtEachSite <- countNucleotidesAtEachSite(nucleotideAlignment)
# Identify the uninformative sites
uninformativeSites <- which(nucleotideCountsAtEachSite < 2)
# Create a new nucleotide alignment without the uninformative sites
nucleotideAlignmentInformative <- nucleotideAlignment[, -uninformativeSites]
informativeGenomePositions <- genomePositions[-uninformativeSites, ]
# Extract metadata from sequences
sequenceInfo <- getSequenceInfoFromNames(rownames(nucleotideAlignment))
# Take a quick look at the metadata
head(sequenceInfo)
# Calculate the proportion of Ns for each sequence
proportionNsInInformativeSites <- calculateProportionNsOfEachSequence(nucleotideAlignmentInformative)
# Build a genetic distance matrix
distances <- dist.dna(as.DNAbin(nucleotideAlignmentInformative), model="raw")
# Build a quick initial phylogenetic tree
initialNJTree <- nj(distances)
# Convert the nucleotide sequences into the PHYDAT format
sequencesInPhyDatFormat <- phyDat(nucleotideAlignmentInformative, type="DNA")
# Compute likelihood of the initial Neighbour Joining tree given sequences
likelihoodObject <- pml(initialNJTree, sequencesInPhyDatFormat)
# Run maximum likelihood
fittingOutput <- optim.pml(likelihoodObject,
optNni = TRUE, # Optimise topology
optInv = TRUE, # Optimise proportion of variable sites
optBf = TRUE, # Optimise the base frequencies
model = "HKY", # Substitution model
rearrangement = "NNI", # Nearest Neighbour Interchanges
control = pml.control(maxit=100000)) # Set the maximum number of iterations
# Testing different substition models
mt <- modelTest(sequencesInPhyDatFormat, tree=initialNJTree, model=c("JC", "HKY", "GTR"))
head(modelTest)
head(mt)
# Testing different substition models
substitutionModelScores <- modelTest(sequencesInPhyDatFormat, tree=initialNJTree, model=c("JC", "HKY", "GTR"))
?modelTest
# Order the table by AICc (corrected AIC)
substitutionModelScores[order(substitutionModelScores$AICc),]
bestmodel <- mt$Model[which.min(mt$AICc)]
bestmodel
?optim.pml
par()$mar
remove.packages("pathogenGenomicsWorkshop")
library("devtools")
library("roxygen2")
packageDirectory <- "~/Desktop/pathogenGenomicsWorkshop/"
setwd(packageDirectory)
document()
devtools::install_github("JosephCrispell/pathogenGenomicsWorkshop")
range(sequenceInfo$SamplingDate)
head(sequenceInfo)
